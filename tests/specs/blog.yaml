openapi: "3.0.0"
info:
  version: 1.0.0
  title: Blog prototype for test migrations
  license:
    name: MIT
servers:
  - url: http://blog.dummy.io/v1
paths:
  /posts:
    get:
      summary: List all posts
      operationId: listPosts
      tags:
        - posts
      parameters:
        - name: limit
          in: query
          description: How many items to return at one time (max 100)
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: A paged array of posts
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Posts"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  schemas:
    User:
      description: The User
      required:
        - id
        - username
        - email
        - password
      x-indexes:
        - unique:username
        - unique:email
        - role,flags
      properties:
        id:
          type: integer
          format: int32
          readOnly: True
        username:
          type: string
          maxLength: 200
        email:
          type: string
          maxLength: 200
        password:
          type: string
          format: password
          x-db-type: string
        role:
          type: string
          maxLength: 20
          x-faker: "$faker->randomElement(['admin', 'editor', 'reader'])"
          default: reader
        flags:
          type: integer
          default: 0
        created_at:
          type: string
          format: date-time
          default: CURRENT_TIMESTAMP
    Users:
      type: array
      items:
        $ref: "#/components/schemas/User"
    Category:
      description: Category of posts
      x-indexes:
         - active
         - unique:title
      required:
        - id
        - title
        - active
      properties:
        id:
          type: integer
          format: int32
          readOnly: True
        title:
          type: string
          maxLength: 255
        active:
          type: boolean
          default: false
        posts:
          type: array
          items:
            $ref: "#/components/schemas/Post"
    Categories:
      type: array
      items:
        $ref: "#/components/schemas/Category"
    Post:
      x-table: blog_posts
      x-pk: uid
      x-indexes:
         - unique:title
         - unique:slug

      description: A blog post (uid used as pk for test purposes)
      required:
        - uid
        - title
        - category
        - author
        - active
      properties:
        uid:
          type: string
          maxLength: 128
          x-db-type: varchar
          readOnly: True
        title:
          type: string
          maxLength: 255
        slug:
          type: string
          minLength: 1
          maxLength: 200
        category:
          $ref: "#/components/schemas/Category"
        active:
          type: boolean
          default: false
        created_at:
          type: string
          format: date
        created_by:
          $ref: "#/components/schemas/User"
        comments:
          type: array
          items:
            $ref: "#/components/schemas/Comment"
    Posts:
      type: array
      items:
        $ref: "#/components/schemas/Post"
    Comment:
      x-table: post_comments
      required:
        - id
        - post
        - author
        - message
        - created_at
      properties:
        id:
          type: integer
          format: int64
          readOnly: True
        post:
          $ref: "#/components/schemas/Post"
        author:
          $ref: "#/components/schemas/User"
        message:
          type: string
          x-db-type: json
          default: '{}'
        meta_data:
          type: array
          x-db-type: json
          default: [ ]
          items:
            type: object
        created_at:
          type: integer
          format: int32
    Comments:
      type: array
      items:
        $ref: "#/components/schemas/Comment"
    Fakerable:
      x-table: fakerable
      properties:
        id:
          type: integer
          format: int64
          readOnly: True
        active:
          type: boolean
        floatval:
          type: number
          format: float
        floatval_lim:
          type: number
          format: float
          minimum: 0
          maximum: 1
        doubleval:
          type: number
          format: double
        int_min:
          type: integer
          minimum: 5
          default: 3
        int_max:
          type: integer
          maximum: 5
        int_minmax:
          type: integer
          minimum: 5
          maximum: 25
        int_created_at:
          type: integer
        int_simple:
          type: integer
        uuid:
          type: string
          x-db-type: UUID
          x-faker: '$faker->uuid'
        str_text:
          type: string
        str_varchar:
          type: string
          maxLength: 100
        str_date:
          type: string
          format: date
        str_datetime:
          type: string
          format: date-time
        str_country:
          type: string
    Error:
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
